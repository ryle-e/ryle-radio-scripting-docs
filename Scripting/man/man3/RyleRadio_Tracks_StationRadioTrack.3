.TH "RyleRadio.Tracks.StationRadioTrack" 3 "Fri Oct 24 2025" "Version 1.0.0" "Ryle Radio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RyleRadio.Tracks.StationRadioTrack \- A eventType of \fBRadioTrack\fP that contains other tracks\&. Has a custom editor in \fBStationRadioTrackEditor
.br
\fP This is meant to emulate an actual radio station by storing multiple different tracks and switching between them as it plays\&. It can be used for really any purpose that calls for switching tracks, though- e\&.g: ''''procedural'''' music, complex ambience, easter eggs (kinda)  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBRyleRadio\&.Tracks\&.RadioTrack\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "override void \fBInit\fP ()"
.br
.RI "Initializes this station and all contained tracks\&. "
.ti -1c
.RI "override void \fBAddToPlayerEndCallback\fP (ref Action< \fBRadioTrackPlayer\fP > _callback)"
.br
.RI "When a \fBRadioTrackPlayer\fP for this station finishes the track we've given it, we update it to use whatever the next track chosen is\&. This method is called when the Player finishes, so we update it here\&. This works because the Player only gets destroyed if it's a one-shot- in which case only one track from the station will be playing anyway\&. "
.ti -1c
.RI "override float \fBGetSample\fP (int _sampleIndex)"
.br
.RI "Gets a sample from the currently playing track\&. "
.in -1c

Public Member Functions inherited from \fBRyleRadio\&.Tracks\&.RadioTrack\fP
.in +1c
.ti -1c
.RI "void \fBInit\fP ()"
.br
.RI "Initializes this track\&. "
.ti -1c
.RI "float \fBGetSample\fP (int _sampleIndex)"
.br
.RI "Gets a sample from the track\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBrandomSequence\fP = true"
.br
.RI "Whether or not this station plays in a random or semi-random order\&. "
.ti -1c
.RI "float \fBthresholdBeforeRepeats\fP"
.br
.RI "When \fBrandomSequence\fP is true, this is the number of other tracks that need to be played before the same one is chosen again\&. Stops the same track from playing back-to-back, and forces variety in the track order\&. "
.ti -1c
.RI "List< \fBStationRadioTrackWrapper\fP > \fBstationTrackWs\fP"
.br
.RI "The tracks contained within this station\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "const string \fBDISPLAY_NAME\fP = 'Station aka Multi\-select'"
.br
.RI "The display name of this track in the editor\&. Required by \fBRadioTrack\fP\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "\fBStationRadioTrackWrapper\fP \fBCurrentTrackW\fP\fR [get]\fP"
.br
.RI "A reference to the track that's currently playing\&. "
.in -1c

Properties inherited from \fBRyleRadio\&.Tracks\&.RadioTrack\fP
.in +1c
.ti -1c
.RI "float \fBSampleRate\fP\fR [get, set]\fP"
.br
.RI "The sample rate of this track\&. "
.ti -1c
.RI "virtual int \fBSampleCount\fP\fR [get, set]\fP"
.br
.RI "The number of samples in this track\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBNextTrack\fP ()"
.br
.RI "Selects the next track for this station to play\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBcurrentTrackIndex\fP"
.br
.RI "The index of the contained track that's currently playing\&. "
.ti -1c
.RI "int[] \fBremainingTracksBeforeRepeat\fP"
.br
.RI "The number of plays that need to happen before each track can be played again\&. Follows the layout described in \fBthresholdBeforeRepeats\fP\&. "
.in -1c
.SH "Detailed Description"
.PP 
A eventType of \fBRadioTrack\fP that contains other tracks\&. Has a custom editor in \fBStationRadioTrackEditor
.br
\fP This is meant to emulate an actual radio station by storing multiple different tracks and switching between them as it plays\&. It can be used for really any purpose that calls for switching tracks, though- e\&.g: ''''procedural'''' music, complex ambience, easter eggs (kinda) 

Also uses \fBStationRadioTrackWrapper\fP 
.PP
Definition at line \fB16\fP of file \fBStationRadioTrack\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "override void RyleRadio\&.Tracks\&.StationRadioTrack\&.AddToPlayerEndCallback (ref Action< \fBRadioTrackPlayer\fP > _callback)\fR [virtual]\fP"

.PP
When a \fBRadioTrackPlayer\fP for this station finishes the track we've given it, we update it to use whatever the next track chosen is\&. This method is called when the Player finishes, so we update it here\&. This works because the Player only gets destroyed if it's a one-shot- in which case only one track from the station will be playing anyway\&. 
.PP
\fBParameters\fP
.RS 4
\fI_callback\fP The callback invoked when the \fBRadioTrackPlayer\fP ends
.RE
.PP

.PP
Reimplemented from \fBRyleRadio\&.Tracks\&.RadioTrack\fP\&.
.PP
Definition at line \fB103\fP of file \fBStationRadioTrack\&.cs\fP\&.
.SS "override float RyleRadio\&.Tracks\&.StationRadioTrack\&.GetSample (int _sampleIndex)"

.PP
Gets a sample from the currently playing track\&. 
.PP
\fBParameters\fP
.RS 4
\fI_sampleIndex\fP The index of the sample
.RE
.PP
\fBReturns\fP
.RS 4
A sample from \fBCurrentTrackW\fP
.RE
.PP

.PP
Implements \fBRyleRadio\&.Tracks\&.IRadioTrack\fP\&.
.PP
Definition at line \fB114\fP of file \fBStationRadioTrack\&.cs\fP\&.
.SS "override void RyleRadio\&.Tracks\&.StationRadioTrack\&.Init ()"

.PP
Initializes this station and all contained tracks\&. 
.PP
Implements \fBRyleRadio\&.Tracks\&.IRadioTrack\fP\&.
.PP
Definition at line \fB80\fP of file \fBStationRadioTrack\&.cs\fP\&.
.SS "void RyleRadio\&.Tracks\&.StationRadioTrack\&.NextTrack ()\fR [private]\fP"

.PP
Selects the next track for this station to play\&. 
.PP
Definition at line \fB124\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBAddToPlayerEndCallback()\fP, and \fBInit()\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "int RyleRadio\&.Tracks\&.StationRadioTrack\&.currentTrackIndex\fR [private]\fP"

.PP
The index of the contained track that's currently playing\&. 
.PP
Definition at line \fB48\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP, and \fBNextTrack()\fP\&.
.SS "const string RyleRadio\&.Tracks\&.StationRadioTrack\&.DISPLAY_NAME = 'Station aka Multi\-select'\fR [static]\fP"

.PP
The display name of this track in the editor\&. Required by \fBRadioTrack\fP\&. 
.PP
Definition at line \fB21\fP of file \fBStationRadioTrack\&.cs\fP\&.
.SS "bool RyleRadio\&.Tracks\&.StationRadioTrack\&.randomSequence = true"

.PP
Whether or not this station plays in a random or semi-random order\&. 
.PP
Definition at line \fB26\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBNextTrack()\fP\&.
.SS "int [] RyleRadio\&.Tracks\&.StationRadioTrack\&.remainingTracksBeforeRepeat\fR [private]\fP"

.PP
The number of plays that need to happen before each track can be played again\&. Follows the layout described in \fBthresholdBeforeRepeats\fP\&. i\&.e if tracks A, B and C are being randomly chosen with a \fBthresholdBeforeRepeats\fP of 0\&.5f, they each need to have 1 other track play before each can repeat (see comments above thresholdBeforeRepeats) 
.br
So if track A was just played after B and C, this array would look like [1, 0, -1]\&. That is, track A needs another track to be played once before it can be repeated, B doesn't need any other tracks to play and thus can be repeated, and same for C 
.br
\fI(a number below 0 is treated as 0 for this system)\fP
.br

.br
 \fBSee:\fP \fBNextTrack()\fP 
.PP
Definition at line \fB64\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP, and \fBNextTrack()\fP\&.
.SS "List<\fBStationRadioTrackWrapper\fP> RyleRadio\&.Tracks\&.StationRadioTrack\&.stationTrackWs"

.PP
The tracks contained within this station\&. 
.PP
Definition at line \fB43\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP, and \fBNextTrack()\fP\&.
.SS "float RyleRadio\&.Tracks\&.StationRadioTrack\&.thresholdBeforeRepeats"

.PP
When \fBrandomSequence\fP is true, this is the number of other tracks that need to be played before the same one is chosen again\&. Stops the same track from playing back-to-back, and forces variety in the track order\&. The number of tracks to be played before one can be played again is \fRround_down( (track_count - 1) * threshold )\fP\&. 
.br
i\&.e with four tracks and a threshold of 0\&.5f, \fRround_down((4 - 1 == 3) * 0\&.5) == 1\fP: one other track will need to be played before a repeat 
.br
i\&.e with four tracks and a threshold of 0\&.7f, \fRround_down((4 - 1 == 3) * 0\&.7) == 2\fP: two other tracks will need to be played before a repeat 
.br
i\&.e with four tracks and a threshold of 1f, \fRround_down((4 - 1 == 3) * 1) == 3\fP: three other tracks (all other tracks) will need to be played before a repeat 
.br
i\&.e with eleven tracks and a threshold of 0\&.8f, \fRround_down((11 - 1 == 10) * 0\&.8f == 8\fP: eight other tracks will need to be played before a repeat \fIDo note that if this is set to 1, the tracks are forced to play in the same randomized sequence repeatedly\fP 
.PP
Definition at line \fB38\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBNextTrack()\fP\&.
.SH "Property Documentation"
.PP 
.SS "\fBStationRadioTrackWrapper\fP RyleRadio\&.Tracks\&.StationRadioTrack\&.CurrentTrackW\fR [get]\fP, \fR [private]\fP"

.PP
A reference to the track that's currently playing\&. 
.PP
Definition at line \fB74\fP of file \fBStationRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP, and \fBNextTrack()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Ryle Radio from the source code\&.
