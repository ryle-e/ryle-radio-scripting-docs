.TH "RyleRadio.Components.RadioObserver" 3 "Fri Oct 24 2025" "Version 1.0.0" "Ryle Radio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RyleRadio.Components.RadioObserver \- A component used to watch for specific happenings on a \fBRadioOutput\fP, e\&.g: a clip being a certain volume, a track starting, the tune being in a certain range
.br
We don't inherit from RadioComponent here since we don't need to use a \fBRadioData\fP ref, but it's very similar\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBObserverEvent\fP"
.br
.RI "A singular event inside a \fBRadioObserver\fP, tracking a value or trigger and invoking methods accordingly\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBEventType\fP { \fBOutputVolume\fP, \fBGain\fP, \fBTunePower\fP, \fBBroadcastPower\fP, \fBInsulation\fP, \fBTrackEnds\fP, \fBTrackStarts\fP, \fBOutputTune\fP, \fBNone\fP }"
.br
.RI "The event an observer is looking for\&. "
.ti -1c
.RI "enum \fBComparisonType\fP { \fBEqual\fP, \fBGreaterThan\fP, \fBGreaterThanOrEqual\fP, \fBLessThan\fP, \fBLessThanOrEqual\fP, \fBBetweenInclusive\fP, \fBBetweenExclusive\fP }"
.br
.RI "The method of comparisonType used for an event\&. For example, checking if the volume is greater than a number, or in a certain range\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBAssignEvents\fP (\fBRadioTrackPlayer\fP _player)"
.br
.RI "Assigns each event to a \fBRadioTrackPlayer\fP for one of our \fBAffectedTracks\fP. This is called when a new \fBRadioTrackPlayer\fP is created that's playing a Track in \fBAffectedTracks\fP\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "string[] \fBAffectedTracks\fP\fR [get]\fP"
.br
.RI "The tracks selected on this Observer\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBAwake\fP ()"
.br
.RI "Attaches the Observer to \fBoutput\fP\&. "
.ti -1c
.RI "void \fBOnDestroy\fP ()"
.br
.RI "Detaches this Observer from \fBoutput\fP\&. "
.ti -1c
.RI "void \fBUpdate\fP ()"
.br
.RI "Run the buffered events and reset for the next frame\&. "
.ti -1c
.RI "void \fBValueEvent\fP (\fBObserverEvent\fP _event, float _value)"
.br
.RI "A generic method letting an \fBObserverEvent\fP tracking a value watch for its change\&. "
.ti -1c
.RI "void \fBTriggerEvent\fP (\fBObserverEvent\fP _event)"
.br
.RI "A generic method tracking if an \fBObserverEvent\fP's trigger has been called\&. E\&.g: a track has just started playing, call event\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBRadioOutput\fP \fBoutput\fP"
.br
.RI "The \fBRadioOutput\fP this observer is attached to\&. "
.ti -1c
.RI "int \fBaffectedTracks\fP"
.br
.RI "The tracks that this observer is watching for events on\&. This is a flag int and is translated to a list of names in \fBAffectedTracks\fP\&. "
.ti -1c
.RI "List< \fBObserverEvent\fP > \fBevents\fP"
.br
.RI "The events that this Observer responds uses, containing values/triggers to watch for and events to call\&. "
.ti -1c
.RI "List< Action > \fBtoDoOnUpdate\fP = new()"
.br
.RI "A buffer for events to run on Update\&. We cannot call \fBUnityEvents\fP in the audio thread, so we need a buffer here so we can run them in \fBUpdate\fP instead\&. "
.ti -1c
.RI "List< \fBObserverEvent\fP > \fBstayedEvents\fP = new()"
.br
.RI "A tracker for which ObserverEvents have been called for this specific frame- prevents us from calling an OnStay event hundreds of times in a frame due to the audio thread being WAY faster\&. "
.ti -1c
.RI "string[] \fBaffectedTrackNames\fP"
.br
.RI "\fBaffectedTracks\fP as a list of names rather than a flag int\&. Created and cached in \fBAffectedTracks\fP "
.in -1c
.SH "Detailed Description"
.PP 
A component used to watch for specific happenings on a \fBRadioOutput\fP, e\&.g: a clip being a certain volume, a track starting, the tune being in a certain range
.br
We don't inherit from RadioComponent here since we don't need to use a \fBRadioData\fP ref, but it's very similar\&. 

One major thing to notice about this class is that each individual Observer component has specific tracks it's watching for- NOT each individual \fBObserverEvent\fP\&. This is due to limitations of MultiselectAttribute- it doesn't display in nested lists properly\&. This is theoretically something I can fix, but I'm not fantastic at custom editors so I'd prefer to accept this limitation for now\&. With that being said, this means it \fIis\fP a bit cleaner to navigate multiple Observers in the scene- not all bad! 
.PP
Definition at line \fB9\fP of file \fBObserverEvent\&.cs\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBRyleRadio\&.Components\&.RadioObserver\&.ComparisonType\fP"

.PP
The method of comparisonType used for an event\&. For example, checking if the volume is greater than a number, or in a certain range\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIGreaterThan \fP
The value is equal to a number\&. We're using floats for almost every \fBEventType\fP with a value, so this won't be used often
.TP
\f(BIGreaterThanOrEqual \fP
The value is greater than a number\&. 
.TP
\f(BILessThan \fP
The value is greater than or equal to a number\&. 
.TP
\f(BILessThanOrEqual \fP
The value is less than a number\&. 
.TP
\f(BIBetweenInclusive \fP
The value is less than or equal to a number\&. 
.TP
\f(BIBetweenExclusive \fP
The value is between numbers x and y, including if it's equal to x or y\&. 
.PP
Definition at line \fB45\fP of file \fBRadioObserver\&.cs\fP\&.
.SS "enum \fBRyleRadio\&.Components\&.RadioObserver\&.EventType\fP"

.PP
The event an observer is looking for\&. Except for Trigger events, we need a value(s) to check for a change with\&. E\&.g: checking if volume is above a threshold\&. Trigger events wait for a certain thing to happen that doesn't need a value\&. E\&.g: checking if a track has just started playing 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIOutputVolume \fP
The volume of the track: tune power * broadcast power * insulation\&. 
.TP
\f(BIGain \fP
The gain of the track: this is currently defined exclusively in the track's gain variable\&. 
.TP
\f(BITunePower \fP
The tune power of the track: how close the \fBRadioOutput\&.Tune\fP value is to the range of the track\&. 
.TP
\f(BIBroadcastPower \fP
The broadcast power of the track: how close to any active RadioBroadcasters the output's transform is\&. 
.TP
\f(BIInsulation \fP
The insulation of the track: the higher the value the less insulation- the power of any \fBRadioInsulator\fP the output is inside of\&. 
.TP
\f(BITrackEnds \fP
The track ends, or loops- this is a Trigger event\&. 
.TP
\f(BITrackStarts \fP
The track starts, or loops (happens after TrackEnds)- this is a Trigger event\&. 
.TP
\f(BIOutputTune \fP
The tune on the \fBRadioOutput\fP is changed\&. 
.TP
\f(BINone \fP
Empty, mainly to temporarily disable an event without deleting it\&. 
.PP
Definition at line \fB28\fP of file \fBRadioObserver\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void RyleRadio\&.Components\&.RadioObserver\&.AssignEvents (\fBRadioTrackPlayer\fP _player)"

.PP
Assigns each event to a \fBRadioTrackPlayer\fP for one of our \fBAffectedTracks\fP. This is called when a new \fBRadioTrackPlayer\fP is created that's playing a Track in \fBAffectedTracks\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fI_player\fP A \fBRadioTrackPlayer\fP playing one of our \fBAffectedTracks\fP
.RE
.PP

.PP
Definition at line \fB166\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBRyleRadio\&.Components\&.RadioOutput\&.PlayerCreation()\fP\&.
.SS "void RyleRadio\&.Components\&.RadioObserver\&.Awake ()\fR [private]\fP"

.PP
Attaches the Observer to \fBoutput\fP\&. 
.PP
Definition at line \fB119\fP of file \fBRadioObserver\&.cs\fP\&.
.SS "void RyleRadio\&.Components\&.RadioObserver\&.OnDestroy ()\fR [private]\fP"

.PP
Detaches this Observer from \fBoutput\fP\&. 
.PP
Definition at line \fB128\fP of file \fBRadioObserver\&.cs\fP\&.
.SS "void RyleRadio\&.Components\&.RadioObserver\&.TriggerEvent (\fBObserverEvent\fP _event)\fR [private]\fP"

.PP
A generic method tracking if an \fBObserverEvent\fP's trigger has been called\&. E\&.g: a track has just started playing, call event\&. \fBSee also: \fP \fBValueEvent()\fP

.PP
\fBParameters\fP
.RS 4
\fI_event\fP Contains the trigger we're watching for, and the event to call when it's triggered
.RE
.PP

.PP
Definition at line \fB294\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBAssignEvents()\fP\&.
.SS "void RyleRadio\&.Components\&.RadioObserver\&.Update ()\fR [private]\fP"

.PP
Run the buffered events and reset for the next frame\&. 
.PP
Definition at line \fB136\fP of file \fBRadioObserver\&.cs\fP\&.
.SS "void RyleRadio\&.Components\&.RadioObserver\&.ValueEvent (\fBObserverEvent\fP _event, float _value)\fR [private]\fP"

.PP
A generic method letting an \fBObserverEvent\fP tracking a value watch for its change\&. This is what's called every time a Track's observed value is changed\&. If the new value fulfills the given \fBObserverEvent\fP, it'll be called\&. E\&.g: volume is in given range- call event

.PP
\fBSee also: \fBTriggerEvent()\fP\fP

.PP
\fBParameters\fP
.RS 4
\fI_event\fP Contains the change we're watching for, and the event to call when the change happens
.br
\fI_value\fP The observed value right now
.RE
.PP

.PP
Definition at line \fB235\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBAssignEvents()\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "string [] RyleRadio\&.Components\&.RadioObserver\&.affectedTrackNames\fR [private]\fP"

.PP
\fBaffectedTracks\fP as a list of names rather than a flag int\&. Created and cached in \fBAffectedTracks\fP 
.PP
Definition at line \fB97\fP of file \fBRadioObserver\&.cs\fP\&.
.SS "int RyleRadio\&.Components\&.RadioObserver\&.affectedTracks\fR [private]\fP"

.PP
The tracks that this observer is watching for events on\&. This is a flag int and is translated to a list of names in \fBAffectedTracks\fP\&. 
.PP
Definition at line \fB65\fP of file \fBRadioObserver\&.cs\fP\&.
.SS "List<\fBObserverEvent\fP> RyleRadio\&.Components\&.RadioObserver\&.events\fR [private]\fP"

.PP
The events that this Observer responds uses, containing values/triggers to watch for and events to call\&. 
.PP
Definition at line \fB70\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBAssignEvents()\fP\&.
.SS "\fBRadioOutput\fP RyleRadio\&.Components\&.RadioObserver\&.output\fR [private]\fP"

.PP
The \fBRadioOutput\fP this observer is attached to\&. 
.PP
Definition at line \fB59\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBAwake()\fP, and \fBOnDestroy()\fP\&.
.SS "List<\fBObserverEvent\fP> RyleRadio\&.Components\&.RadioObserver\&.stayedEvents = new()\fR [private]\fP"

.PP
A tracker for which ObserverEvents have been called for this specific frame- prevents us from calling an OnStay event hundreds of times in a frame due to the audio thread being WAY faster\&. \fBSee also:\fP \fBtoDoOnUpdate\fP 
.PP
Definition at line \fB86\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBAssignEvents()\fP, and \fBUpdate()\fP\&.
.SS "List<Action> RyleRadio\&.Components\&.RadioObserver\&.toDoOnUpdate = new()\fR [private]\fP"

.PP
A buffer for events to run on Update\&. We cannot call \fBUnityEvents\fP in the audio thread, so we need a buffer here so we can run them in \fBUpdate\fP instead\&. \fBSee also: \fP\fBstayedEvents\fP 
.PP
Definition at line \fB79\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBTriggerEvent()\fP, \fBUpdate()\fP, and \fBValueEvent()\fP\&.
.SH "Property Documentation"
.PP 
.SS "string [] RyleRadio\&.Components\&.RadioObserver\&.AffectedTracks\fR [get]\fP"

.PP
The tracks selected on this Observer\&. This is an accessor for \fBaffectedTrackNames\fP and \fBaffectedTracks\fP - uses MultiselectAttribute\&.To to automatically convert the flag int to a string array 
.PP
Definition at line \fB104\fP of file \fBRadioObserver\&.cs\fP\&.
.PP
Referenced by \fBRyleRadio\&.Components\&.RadioOutput\&.PlayerCreation()\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Ryle Radio from the source code\&.
