.TH "RyleRadio.Tracks.ProceduralRadioTrack" 3 "Fri Oct 24 2025" "Version 1.0.0" "Ryle Radio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RyleRadio.Tracks.ProceduralRadioTrack \- A \fBRadioTrack\fP that plays procedurally generated audio, such as noice, silence, and waveforms\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBRyleRadio\&.Tracks\&.RadioTrack\fP, and \fBRyleRadio\&.Tracks\&.IStationTrack\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBProceduralType\fP { \fBWhiteNoise\fP, \fBPinkNoise\fP, \fBBrownNoise\fP, \fBSineWave\fP, \fBSilence\fP }"
.br
.RI "The eventType of procedural audio this track is generating\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "override void \fBInit\fP ()"
.br
.RI "Initializes this track\&. "
.ti -1c
.RI "override float \fBGetSample\fP (int _sampleIndex)"
.br
.RI "Get the next sample of the selected procedural audio eventType\&. "
.in -1c

Public Member Functions inherited from \fBRyleRadio\&.Tracks\&.RadioTrack\fP
.in +1c
.ti -1c
.RI "void \fBInit\fP ()"
.br
.RI "Initializes this track\&. "
.ti -1c
.RI "float \fBGetSample\fP (int _sampleIndex)"
.br
.RI "Gets a sample from the track\&. "
.ti -1c
.RI "virtual void \fBAddToPlayerEndCallback\fP (ref Action< \fBRadioTrackPlayer\fP > _callback)"
.br
.RI "Activates an event to run whenever this track ends\&. This is mainly used for stations to switch track when the previous one ends\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBProceduralType\fP \fBproceduralType\fP = \fBProceduralType\&.WhiteNoise\fP"
.br
.RI "The selected eventType of noise for this track\&. "
.ti -1c
.RI "float \fBduration\fP = 0"
.br
.RI "If this track is inside of a \fBStationRadioTrack\fP, then it should only play for a certain duration- this is that duration\&. "
.ti -1c
.RI "float \fBwaveFrequency\fP = 100"
.br
.RI "The frequency/pitch of the waveform\&. "
.ti -1c
.RI "float \fBbrownWalkPower\fP = 0\&.5f"
.br
.RI "The value used to define the sound of brown noise\&.
.br

.br
 Brown noise works by adding the generated sample to all previous generated samples\&. This float is what these generated samples are multiplied by when stored\&. This means that the higher the walk power, the larger the difference that each sample makes on average, and the closer it sounds to white noise\&. "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "const string \fBDISPLAY_NAME\fP = 'Procedural'"
.br
.RI "The name of this class in the editor- required by \fBRadioTrack\fP\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "bool \fBIsInStation\fP\fR [get, set]\fP"
.br
.RI "Whether this is in a station or not\&. Required by \fBIStationTrack\fP\&. "
.in -1c

Properties inherited from \fBRyleRadio\&.Tracks\&.RadioTrack\fP
.in +1c
.ti -1c
.RI "float \fBSampleRate\fP\fR [get, set]\fP"
.br
.RI "The sample rate of this track\&. "
.ti -1c
.RI "virtual int \fBSampleCount\fP\fR [get, set]\fP"
.br
.RI "The number of samples in this track\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBphase\fP = 0"
.br
.RI "The progress of the waveform used when generating it\&. "
.ti -1c
.RI "float \fBlastBrown\fP = 0"
.br
.RI "The generated brown noise from the previous sample\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "const float \fBNOISE_MULTIPLIER\fP = \&.2f"
.br
.RI "A base multiplier for noise- because the samples can go all the way up to 1, noise tends to be a lot louder than other tracks, e\&.g: AudioClips in \fBClipRadioTrack\fP\&. "
.ti -1c
.RI "const float \fBPINK_MULTIPLIER\fP = \&.5f"
.br
.RI "Pink noise is even louder than the other noise types, so we curb it a little\&. "
.ti -1c
.RI "const float \fBBASE_SAMPLE_RATE\fP = 44100"
.br
.RI "The default sample rate for the procedural tracks, can adjust this if required\&. "
.in -1c
.SH "Detailed Description"
.PP 
A \fBRadioTrack\fP that plays procedurally generated audio, such as noice, silence, and waveforms\&. 
.PP
Definition at line \fB11\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBRyleRadio\&.Tracks\&.ProceduralRadioTrack\&.ProceduralType\fP"

.PP
The eventType of procedural audio this track is generating\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIWhiteNoise \fP
White noise: random samples between 0 and 1\&. 
.TP
\f(BIPinkNoise \fP
Special eventType of noise defined by Paul Kellet's refined method (pk3): sounds "fuller" than white noise\&. 
.TP
\f(BIBrownNoise \fP
Special eventType of noise using a value (\fBbrownWalkPower\fP): sounds softer and deeper\&. 
.TP
\f(BISineWave \fP
A waveform: shaped as a sine wave at a given frequency\&. 
.TP
\f(BISilence \fP
Silence: samples at 0\&. 
.PP
Definition at line \fB21\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "override float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.GetSample (int _sampleIndex)"

.PP
Get the next sample of the selected procedural audio eventType\&. 
.PP
\fBParameters\fP
.RS 4
\fI_sampleIndex\fP The index of the sample- useless for noise, useful for waveforms
.RE
.PP
\fBReturns\fP
.RS 4
The sample of generated audio
.RE
.PP

.PP
Implements \fBRyleRadio\&.Tracks\&.IRadioTrack\fP\&.
.PP
Definition at line \fB103\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.SS "override void RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.Init ()"

.PP
Initializes this track\&. 
.PP
Implements \fBRyleRadio\&.Tracks\&.IRadioTrack\fP\&.
.PP
Definition at line \fB88\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "const float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.BASE_SAMPLE_RATE = 44100\fR [static]\fP, \fR [private]\fP"

.PP
The default sample rate for the procedural tracks, can adjust this if required\&. 
.PP
Definition at line \fB32\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP\&.
.SS "float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.brownWalkPower = 0\&.5f"

.PP
The value used to define the sound of brown noise\&.
.br

.br
 Brown noise works by adding the generated sample to all previous generated samples\&. This float is what these generated samples are multiplied by when stored\&. This means that the higher the walk power, the larger the difference that each sample makes on average, and the closer it sounds to white noise\&. 
.PP
Definition at line \fB57\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP\&.
.SS "const string RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.DISPLAY_NAME = 'Procedural'\fR [static]\fP"

.PP
The name of this class in the editor- required by \fBRadioTrack\fP\&. 
.PP
Definition at line \fB16\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.SS "float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.duration = 0"

.PP
If this track is inside of a \fBStationRadioTrack\fP, then it should only play for a certain duration- this is that duration\&. 
.PP
Definition at line \fB43\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP\&.
.SS "float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.lastBrown = 0\fR [private]\fP"

.PP
The generated brown noise from the previous sample\&. 
.PP
Definition at line \fB77\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP\&.
.SS "const float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.NOISE_MULTIPLIER = \&.2f\fR [static]\fP, \fR [private]\fP"

.PP
A base multiplier for noise- because the samples can go all the way up to 1, noise tends to be a lot louder than other tracks, e\&.g: AudioClips in \fBClipRadioTrack\fP\&. 
.PP
Definition at line \fB30\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP\&.
.SS "float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.phase = 0\fR [private]\fP"

.PP
The progress of the waveform used when generating it\&. 
.PP
Definition at line \fB67\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP, and \fBInit()\fP\&.
.SS "const float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.PINK_MULTIPLIER = \&.5f\fR [static]\fP, \fR [private]\fP"

.PP
Pink noise is even louder than the other noise types, so we curb it a little\&. 
.PP
Definition at line \fB31\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP\&.
.SS "\fBProceduralType\fP RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.proceduralType = \fBProceduralType\&.WhiteNoise\fP"

.PP
The selected eventType of noise for this track\&. 
.PP
Definition at line \fB37\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP\&.
.SS "float RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.waveFrequency = 100"

.PP
The frequency/pitch of the waveform\&. 
.PP
Definition at line \fB49\fP of file \fBProceduralRadioTrack\&.cs\fP\&.
.PP
Referenced by \fBGetSample()\fP\&.
.SH "Property Documentation"
.PP 
.SS "bool RyleRadio\&.Tracks\&.ProceduralRadioTrack\&.IsInStation\fR [get]\fP, \fR [set]\fP"

.PP
Whether this is in a station or not\&. Required by \fBIStationTrack\fP\&. 
.PP
Implements \fBRyleRadio\&.Tracks\&.IStationTrack\fP\&.
.PP
Definition at line \fB82\fP of file \fBProceduralRadioTrack\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Ryle Radio from the source code\&.
