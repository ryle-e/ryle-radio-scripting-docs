.TH "RyleRadio.Components.RadioOutput" 3 "Fri Oct 24 2025" "Version 1.0.0" "Ryle Radio" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RyleRadio.Components.RadioOutput \- The main scene component for a radio that plays it through an AudioSource\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBRyleRadio\&.Components\&.Base\&.RadioComponent\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBMultiplePlayersSelector\fP { \fBYoungest\fP, \fBOldest\fP, \fBRandom\fP }"
.br
.RI "The method by which a \fBRadioTrackPlayer\fP is chosen from this output\&. Really only matters when you're playing the same track repeatedly causing overlaps\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "override void \fBInit\fP ()"
.br
.RI "Initializes the output itself, and creates all required every required \fBRadioTrackPlayer\fP\&. "
.ti -1c
.RI "\fBRadioTrackPlayer\fP \fBPlayOneShot\fP (string _id)"
.br
.RI "Plays a track as a one-shot\&. A one-shot destroys itself when its track ends\&. "
.ti -1c
.RI "\fBRadioTrackPlayer\fP \fBPlayLoop\fP (string _id)"
.br
.RI "Plays a track as a loop\&. A loop restarts when the track ends, then continues to play\&. "
.ti -1c
.RI "bool \fBTryGetPlayer\fP (string _trackID, out \fBRadioTrackPlayer\fP _player, bool _createNew=false, \fBMultiplePlayersSelector\fP _multiplePlayerSelector=\fBMultiplePlayersSelector\&.Youngest\fP)"
.br
.RI "Gets an active \fBRadioTrackPlayer\fP from this output\&. "
.in -1c

Public Member Functions inherited from \fBRyleRadio\&.Components\&.Base\&.RadioComponent\fP
.in +1c
.ti -1c
.RI "void \fBInit\fP ()"
.br
.RI "Initialises this component\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBUpdate\fP ()"
.br
.RI "Updates \fBcachedPos\fP\&. "
.ti -1c
.RI "void \fBLocalInit\fP ()"
.br
.RI "Initializes the RadioData- this needs to be separated from \fBInit()\fP as it would be recursive otherwise\&. "
.ti -1c
.RI "void \fBPlayerCreation\fP (\fBRadioTrackPlayer\fP _player)"
.br
.RI "Sets up and stores a new \fBRadioTrackPlayer\fP and alerts any \fBRadioObserver\fP of its creation\&. "
.ti -1c
.RI "virtual void \fBOnAudioFilterRead\fP (float[] _data, int _channels)"
.br
.RI "Gets a set of samples from the radio to play from the AudioSource- this preserves the settings on the Source, e\&.g: volume, 3D\&. This is the main driving method for the radio's playback\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "float \fBtune\fP"
.br
.RI "The current tune value of this output- akin to the frequency of a real radio\&. Controls what tracks can be heard through tune power\&. Never modify this directly except for in the inspector, use \fBTune\fP instead\&. "
.ti -1c
.RI "List< \fBRadioTrackPlayer\fP > \fBplayers\fP = new()"
.br
.RI "The players used by this output\&. "
.ti -1c
.RI "Vector3 \fBcachedPos\fP"
.br
.RI "The position of this object as of the last frame update\&. We can't access \fRtransform\&.position\fP from the audio thread, so we cache it here\&. "
.in -1c

Protected Attributes inherited from \fBRyleRadio\&.Components\&.Base\&.RadioComponent\fP
.in +1c
.ti -1c
.RI "\fBRadioData\fP \fBdata\fP"
.br
.RI "The \fBRadioData\fP (aka just radio) that this component is linked to\&. "
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "List< \fBRadioObserver\fP > \fBObservers\fP = new()\fR [get, private set]\fP"
.br
.RI "Every \fBRadioObserver\fP associated with this output\&. "
.ti -1c
.RI "Action< float > \fBOnTune\fP = new(_ => { })\fR [get, set]\fP"
.br
.RI "Event called whenever \fBTune\fP is changed\&. "
.ti -1c
.RI "float \fBTune\fP\fR [get, set]\fP"
.br
.RI "The \fBtune\fP clamped to the full range\&. "
.ti -1c
.RI "float \fBTune01\fP\fR [get]\fP"
.br
.RI "\fBTune\fP scaled to [0 - 1], useful for UI "
.ti -1c
.RI "float \fBDisplayTune\fP\fR [get]\fP"
.br
.RI "\fBTune\fP with limited decimal points- looks better when displayed, more like an actual radio "
.in -1c

Properties inherited from \fBRyleRadio\&.Components\&.Base\&.RadioComponent\fP
.in +1c
.ti -1c
.RI "\fBRadioData\fP \fBData\fP\fR [get]\fP"
.br
.RI "Read-only accessor for \fBdata\fP\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBExecOnTune\fP ()"
.br
.RI "Called when tune is modified in the inspector\&. "
.ti -1c
.RI "void \fBStartPlayers\fP ()"
.br
.RI "Creates every \fBRadioTrackPlayer\fP that this output needs for playback\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "float \fBbaseSampleRate\fP"
.br
.RI "The normal sample rate of this output, applied to each \fBRadioTrackPlayer\fP\&. "
.ti -1c
.RI "Action \fBplayEvents\fP = () => { }"
.br
.RI "Called at the end of every audio cycle so that we don't interrupt threads when manipulating RadioTrackPlayers\&. "
.in -1c
.SH "Detailed Description"
.PP 
The main scene component for a radio that plays it through an AudioSource\&. 

\fBSee \fP\fBRadioTrackPlayer\fP as well for more info on how playback works 
.PP
Definition at line \fB20\fP of file \fBRadioOutput\&.cs\fP\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBRyleRadio\&.Components\&.RadioOutput\&.MultiplePlayersSelector\fP"

.PP
The method by which a \fBRadioTrackPlayer\fP is chosen from this output\&. Really only matters when you're playing the same track repeatedly causing overlaps\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIYoungest \fP
Selects the youngest player\&. 
.TP
\f(BIOldest \fP
Selects the oldest player\&. 
.TP
\f(BIRandom \fP
Selects a random player (probably useless but funny to have) 
.PP
Definition at line \fB25\fP of file \fBRadioOutput\&.cs\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void RyleRadio\&.Components\&.RadioOutput\&.ExecOnTune ()\fR [private]\fP"

.PP
Called when tune is modified in the inspector\&. 
.PP
Definition at line \fB103\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "override void RyleRadio\&.Components\&.RadioOutput\&.Init ()"

.PP
Initializes the output itself, and creates all required every required \fBRadioTrackPlayer\fP\&. 
.PP
Definition at line \fB143\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "void RyleRadio\&.Components\&.RadioOutput\&.LocalInit ()\fR [protected]\fP"

.PP
Initializes the RadioData- this needs to be separated from \fBInit()\fP as it would be recursive otherwise\&. 
.PP
Definition at line \fB132\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "virtual void RyleRadio\&.Components\&.RadioOutput\&.OnAudioFilterRead (float[] _data, int _channels)\fR [protected]\fP, \fR [virtual]\fP"

.PP
Gets a set of samples from the radio to play from the AudioSource- this preserves the settings on the Source, e\&.g: volume, 3D\&. This is the main driving method for the radio's playback\&. The method itself appears to have been initially introduced so devs could create custom audio filters, but it just so happens we can use it for direct output of samples too!

.PP
\fBParameters\fP
.RS 4
\fI_data\fP Whatever other audio is playing from the AudioSource- preferably nothing
.br
\fI_channels\fP The number of channels the AudioSource is using- the radio itself is limited to one channel, but still outputs as two- they'll just be identical\&.
.RE
.PP

.PP
Definition at line \fB358\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "void RyleRadio\&.Components\&.RadioOutput\&.PlayerCreation (\fBRadioTrackPlayer\fP _player)\fR [protected]\fP"

.PP
Sets up and stores a new \fBRadioTrackPlayer\fP and alerts any \fBRadioObserver\fP of its creation\&. 
.PP
\fBParameters\fP
.RS 4
\fI_player\fP The new player to set up
.RE
.PP

.PP
Definition at line \fB158\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBPlayLoop()\fP, \fBPlayOneShot()\fP, and \fBStartPlayers()\fP\&.
.SS "\fBRadioTrackPlayer\fP RyleRadio\&.Components\&.RadioOutput\&.PlayLoop (string _id)"

.PP
Plays a track as a loop\&. A loop restarts when the track ends, then continues to play\&. 
.PP
\fBParameters\fP
.RS 4
\fI_id\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB256\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "\fBRadioTrackPlayer\fP RyleRadio\&.Components\&.RadioOutput\&.PlayOneShot (string _id)"

.PP
Plays a track as a one-shot\&. A one-shot destroys itself when its track ends\&. 
.PP
\fBParameters\fP
.RS 4
\fI_id\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB221\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBTryGetPlayer()\fP\&.
.SS "void RyleRadio\&.Components\&.RadioOutput\&.StartPlayers ()\fR [private]\fP"

.PP
Creates every \fBRadioTrackPlayer\fP that this output needs for playback\&. 
.PP
Definition at line \fB199\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP\&.
.SS "bool RyleRadio\&.Components\&.RadioOutput\&.TryGetPlayer (string _trackID, out \fBRadioTrackPlayer\fP _player, bool _createNew = \fRfalse\fP, \fBMultiplePlayersSelector\fP _multiplePlayerSelector = \fR\fBMultiplePlayersSelector::Youngest\fP\fP)"

.PP
Gets an active \fBRadioTrackPlayer\fP from this output\&. 
.PP
\fBParameters\fP
.RS 4
\fI_trackID\fP The ID of the track used by the player
.br
\fI_player\fP Output parameter containing the found player
.br
\fI_createNew\fP Whether or not a new player should be created if one can't be found\&. Players created this way are always one-shots
.br
\fI_multiplePlayerSelector\fP How a player is selected when multiple are present for the same track
.RE
.PP
\fBReturns\fP
.RS 4
True if a player was found or created, false if not
.RE
.PP

.PP
Definition at line \fB289\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "virtual void RyleRadio\&.Components\&.RadioOutput\&.Update ()\fR [protected]\fP, \fR [virtual]\fP"

.PP
Updates \fBcachedPos\fP\&. 
.PP
Definition at line \fB113\fP of file \fBRadioOutput\&.cs\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "float RyleRadio\&.Components\&.RadioOutput\&.baseSampleRate\fR [private]\fP"

.PP
The normal sample rate of this output, applied to each \fBRadioTrackPlayer\fP\&. 
.PP
Definition at line \fB51\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBInit()\fP, \fBPlayLoop()\fP, \fBPlayOneShot()\fP, and \fBStartPlayers()\fP\&.
.SS "Vector3 RyleRadio\&.Components\&.RadioOutput\&.cachedPos\fR [protected]\fP"

.PP
The position of this object as of the last frame update\&. We can't access \fRtransform\&.position\fP from the audio thread, so we cache it here\&. 
.PP
Definition at line \fB46\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBOnAudioFilterRead()\fP, and \fBUpdate()\fP\&.
.SS "List<\fBRadioTrackPlayer\fP> RyleRadio\&.Components\&.RadioOutput\&.players = new()\fR [protected]\fP"

.PP
The players used by this output\&. 
.PP
Definition at line \fB41\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBOnAudioFilterRead()\fP, \fBPlayerCreation()\fP, \fBPlayOneShot()\fP, and \fBTryGetPlayer()\fP\&.
.SS "Action RyleRadio\&.Components\&.RadioOutput\&.playEvents = () => { }\fR [private]\fP"

.PP
Called at the end of every audio cycle so that we don't interrupt threads when manipulating RadioTrackPlayers\&. 
.PP
Definition at line \fB56\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBOnAudioFilterRead()\fP, \fBPlayLoop()\fP, and \fBPlayOneShot()\fP\&.
.SS "float RyleRadio\&.Components\&.RadioOutput\&.tune\fR [protected]\fP"

.PP
The current tune value of this output- akin to the frequency of a real radio\&. Controls what tracks can be heard through tune power\&. Never modify this directly except for in the inspector, use \fBTune\fP instead\&. 
.PP
Definition at line \fB36\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBExecOnTune()\fP, and \fBInit()\fP\&.
.SH "Property Documentation"
.PP 
.SS "float RyleRadio\&.Components\&.RadioOutput\&.DisplayTune\fR [get]\fP"

.PP
\fBTune\fP with limited decimal points- looks better when displayed, more like an actual radio 
.PP
Definition at line \fB95\fP of file \fBRadioOutput\&.cs\fP\&.
.SS "List<\fBRadioObserver\fP> RyleRadio\&.Components\&.RadioOutput\&.Observers = new()\fR [get]\fP, \fR [private set]\fP"

.PP
Every \fBRadioObserver\fP associated with this output\&. 
.PP
Definition at line \fB61\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBPlayerCreation()\fP\&.
.SS "Action<float> RyleRadio\&.Components\&.RadioOutput\&.OnTune = new(_ => { })\fR [get]\fP, \fR [set]\fP"

.PP
Event called whenever \fBTune\fP is changed\&. 
.PP
Definition at line \fB66\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBExecOnTune()\fP, and \fBInit()\fP\&.
.SS "float RyleRadio\&.Components\&.RadioOutput\&.Tune\fR [get]\fP, \fR [set]\fP"

.PP
The \fBtune\fP clamped to the full range\&. 
.PP
Definition at line \fB71\fP of file \fBRadioOutput\&.cs\fP\&.
.PP
Referenced by \fBOnAudioFilterRead()\fP\&.
.SS "float RyleRadio\&.Components\&.RadioOutput\&.Tune01\fR [get]\fP"

.PP
\fBTune\fP scaled to [0 - 1], useful for UI 
.PP
Definition at line \fB87\fP of file \fBRadioOutput\&.cs\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Ryle Radio from the source code\&.
